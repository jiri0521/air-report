generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}
        

model Incident {
  id                         Int      @id @default(autoincrement())
  patientId                  String?  
  patientGender              String
  patientAge                 String
  patientRespirator          String
  patientDialysis            String
  involvedPartyProfession    String
  involvedPartyExperience    String
  involvedPartyName          String?  // Changed to allow null
  discovererProfession       String
  discovererName             String?  // Changed to allow null
  occurrenceDateTime         DateTime
  location                   String
  reportToDoctor             DateTime
  reportToSupervisor         DateTime
  category                   String
  medicationDetail           String? // New field for detailed medication category
  tubeDetail                 String? // New field for detailed tube category
  lifeThreat                 String
  trustImpact                String
  impactLevel                String
  cause                      String?
  details                    String
  summary                    String?
  workStatus                 String
  involvedPartyFactors       String[]
  workBehavior               String[]
  physicalCondition          String[]
  psychologicalState         String[]
  medicalEquipment           String[]
  medication                 String[]
  system                     String[]
  cooperation                String[]
  explanation                String[]
  countermeasures            String?
  comment                    String?
  userId                     String?
  user                       User?    @relation(fields: [userId], references: [id])
  isDeleted                  Boolean  @default(false)

  @@map("incidents")
}


model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@id([provider, providerAccountId])
}

model Announcement {
  id        Int      @id @default(autoincrement())
  title     String
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String?
  user      User?    @relation(fields: [userId], references: [id])

  @@map("announcements")
}

model User {
  id            String        @id @default(cuid())
  name          String?
  email         String        @unique
  emailVerified DateTime?
  image         String?
  password      String?
  accounts      Account[]
  settings      UserSettings?
  role          Role          @default(USER)
  incidents     Incident[]
  announcements Announcement[]
  passwordResetTokens PasswordResetToken[]
}

enum Role {
  USER
  ADMIN
  MANAGER
}
 
 model UserSettings {
  id                 String  @id @default(cuid())
  userId             String  @unique
  name               String
  fontSize           String  @default("medium")
  theme              String  @default("system")
  language           String  @default("日本語")
  emailNotifications Boolean @default(true)
  pushNotifications  Boolean @default(false)
  user               User    @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model PasswordResetToken {
  id        String   @id @default(cuid())
  token     String   @unique
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  expiresAt DateTime
  createdAt DateTime @default(now())

  @@map("password_reset_tokens")
}